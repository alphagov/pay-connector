server:
  applicationConnectors:
    - type: http
      port: ${PORT:-0}
  adminConnectors:
    - type: http
      port: ${ADMIN_PORT:-0}
  registerDefaultExceptionMappers: false

logging:
  level: INFO
  appenders:
    - type: console
      threshold: ALL
      timeZone: UTC
      target: stdout
      logFormat: "[%d{yyyy-MM-dd HH:mm:ss.SSS}] [thread=%thread] [level=%-5level] [logger=%logger{15}] [requestID=%X{X-Request-Id:-(none)}] [chargeID=%X{chargeId:-(none)}] - %msg%n"

links:
  frontendUrl: ${FRONTEND_URL}

worldpay:
  urls:
    test: ${GDS_CONNECTOR_WORLDPAY_TEST_URL}
    live: ${GDS_CONNECTOR_WORLDPAY_LIVE_URL}
  secureNotificationEnabled: ${SECURE_WORLDPAY_NOTIFICATION_ENABLED:-false}
  notificationDomain: ${SECURE_WORLDPAY_NOTIFICATION_DOMAIN:-worldpay.com}
  credentials: ['username','password','merchant_id']
  applePay:
    privateKey: ${APPLE_PAY_PAYMENT_PROCESSING_PRIVATE_KEY:-privateKeyWhichShouldBeBase64Encoded}
    publicCertificate: ${APPLE_PAY_PAYMENT_PROCESSING_CERTIFICATE:-publicCertificateWhichShouldBeBase64Encoded}
  jerseyClientOverrides:
    auth:
      # Auth is run in a background thread which will release the HTTP request from frontend after 1 second
      # supports a polling mechanism. The background thread will wait for the auth request to complete and
      # make its status available to frontend. Median auth time is 1500ms. There are occasional spikes in the
      # auth time, up to 80 seconds. We don't want to leave a user waiting on a spinner for that long, so we'll
      # cut off after 50 seconds and abort the auth attempt. This threshold is chosen to be just below the
      # timeout of 60 seconds used by the egress proxies. Previously we tried as low as 10 seconds and then 20
      # seconds but services reported an increase in AUTHORISATION ERROR states ultimately caused by
      # GATEWAY_CONNECTION_TIMEOUT_ERROR so we are increasing it to try to not get those outliers.
      readTimeout: 50000ms
    cancel:
      # Cancel median time is 500ms and done synchronously. Leave a bit of headroom since we don't have retries on this.
      readTimeout: 2000ms
    refund:
      # Refund median time is 500ms and done synchronously. Leave a bit of headroom since we don't have retries on this.
      readTimeout: 2000ms
    capture:
      # Capture median time is 200ms. We can be quite agressive in the timeout since we have a retry mechanism.
      readTimeout: 1000ms

smartpay:
  urls:
    test: ${GDS_CONNECTOR_SMARTPAY_TEST_URL}
    live: ${GDS_CONNECTOR_SMARTPAY_LIVE_URL}
  credentials: ['username','password','merchant_id']

epdq:
  urls:
    test: ${GDS_CONNECTOR_EPDQ_TEST_URL}
    live: ${GDS_CONNECTOR_EPDQ_LIVE_URL}
  credentials: ['username','password','merchant_id','sha_in_passphrase','sha_out_passphrase']

  # The Jersey Client timeouts are set to the same values as for Worldpay initially until we gather more metrics
  # to be in a position to tweak more appropriately.
  jerseyClientOverrides:
    auth:
      readTimeout: 20000ms
    cancel:
      readTimeout: 20000ms
    refund:
      readTimeout: 2000ms
    capture:
      readTimeout: 1000ms

stripe:
  url: ${GDS_CONNECTOR_STRIPE_URL:-https://api.stripe.com}
  authTokens:
    test: ${GDS_CONNECTOR_STRIPE_AUTH_TOKEN}
    live: ${GDS_CONNECTOR_STRIPE_AUTH_LIVE_TOKEN}
  webhookSigningSecrets:
    test: ${GDS_CONNECTOR_STRIPE_WEBHOOK_SIGN_SECRET}
    live: ${GDS_CONNECTOR_STRIPE_WEBHOOK_LIVE_SIGN_SECRET}
  platformAccountId: ${STRIPE_PLATFORM_ACCOUNT_ID}
  feePercentage: ${STRIPE_TRANSACTION_FEE_PERCENTAGE}
  collectFee: ${COLLECT_FEE_FEATURE_FLAG:-false}

executorServiceConfig:
  timeoutInSeconds: ${AUTH_READ_TIMEOUT_SECONDS:-1}
  threadsPerCpu: ${NUMBER_OF_THREADS_PER_CPU:-100}

captureProcessConfig:
  backgroundProcessingEnabled: ${BACKGROUND_PROCESSING_ENABLED:-true}
  schedulerInitialDelayInSeconds: ${CAPTURE_PROCESS_SCHEDULER_INITIAL_DELAY_SECONDS:-20}
  schedulerRandomIntervalMinimumInSeconds: ${CAPTURE_PROCESS_SCHEDULER_RANDOM_INTERVAL_MINIMUM_SECONDS:-10}
  schedulerRandomIntervalMaximumInSeconds: ${CAPTURE_PROCESS_SCHEDULER_RANDOM_INTERVAL_MAXIMUM_SECONDS:-20}

  batchSize: ${CAPTURE_PROCESS_BATCH_SIZE:-10}
  schedulerThreads: ${SCHEDULER_THREADS:-10}

  # The below effectively get multiplied together. In order to handle how
  # certain payment gateways do things, it is extremely desirable to keep these
  # values such that we will continue retrying for at least two nights after
  # the initial attempt. See PP-2627 or commit
  # e931b4dab25284acedeb6d59d4bfd3d29e454b82 for more details.
  retryFailuresEvery: ${CAPTURE_PROCESS_RETRY_FAILURES_EVERY:-60 minutes}
  maximumRetries: ${CAPTURE_PROCESS_MAXIMUM_RETRIES:-96}
  captureUsingSQS: ${CAPTURE_USING_SQS_FEATURE_FLAG:-false}

sqsConfig:
  nonStandardServiceEndpoint: ${AWS_SQS_NON_STANDARD_SERVICE_ENDPOINT:-false}
  endpoint: ${AWS_SQS_ENDPOINT:-}
  region: ${AWS_SQS_REGION}
  secretKey: ${AWS_SECRET_KEY}
  accessKey: ${AWS_ACCESS_KEY}
  captureQueueUrl: ${AWS_SQS_CAPTURE_QUEUE_URL}


transactionsPaginationServiceConfig:
  displayPageSize: ${TRANSACTION_LIST_DISPLAY_SIZE:-500}

jerseyClient:
  # Defines the socket timeout (SO_TIMEOUT), which is the
  # timeout for waiting for data or, put differently, a maximum period inactivity
  # between two consecutive data packets).
  timeout: 25500ms

  # Determines the timeout until a connection is established
  connectionTimeout: 25500ms
  timeToLive: 1h
  cookiesEnabled: false
  maxConnections: 1024
  maxConnectionsPerRoute: 1024
  keepAlive: 0ms
  retries: 0
  userAgent: connector
  gzipEnabledForRequests: false

customJerseyClient:
  # Sets the read timeout to a specified timeout, in
  # milliseconds. A non-zero value specifies the timeout when
  # reading from Input stream when a connection is established to a
  # resource. If the timeout expires before there is data available
  # for read, a java.net.SocketTimeoutException is raised. A
  # timeout of zero is interpreted as an infinite timeout.
  readTimeout: 90000ms

database:
  driverClass: org.postgresql.Driver
  user: ${DB_USER}
  password: ${DB_PASSWORD}
  url: jdbc:postgresql://${DB_HOST}:5432/connector?sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory&${DB_SSL_OPTION}

  # the maximum amount of time to wait on an empty pool before throwing an exception
  maxWaitForConnection: 1s

  # the SQL query to run when validating a connection's liveness
  validationQuery: "SELECT '1'"

  # the timeout before a connection validation queries fail
  validationQueryTimeout: 2s

  # The initial size of the connection pool
  initialSize: 4

  # the minimum number of connections to keep open
  minSize: 4

  # the maximum number of connections to keep open
  maxSize: 8

  # whether or not idle connections should be validated
  checkConnectionWhileIdle: false

  # the amount of time to sleep between runs of the idle connection validation, abandoned cleaner and idle pool resizing
  evictionInterval: 10s

  # the minimum amount of time an connection must sit idle in the pool before it is eligible for eviction
  minIdleTime: 1 minute
  properties:
    tcpKeepAlive: true

jpa:
  jpaLoggingLevel: ${JPA_LOG_LEVEL:-WARNING}
  sqlLoggingLevel: ${JPA_SQL_LOG_LEVEL:-WARNING}
  ddlGenerationOutputMode: database
  queryResultsCache: false
  cacheSharedDefault: false

notifyConfig:
  apiKey: ${NOTIFY_API_KEY:-api_key-pay-notify-service-id-pay-notify-secret-needs-to-be-32-chars-fsghdngfhmhfkrgsfs}
  emailTemplateId: ${NOTIFY_PAYMENT_RECEIPT_EMAIL_TEMPLATE_ID}
  refundIssuedEmailTemplateId: ${NOTIFY_REFUND_ISSUED_EMAIL_TEMPLATE_ID}
  notificationBaseURL: ${NOTIFY_BASE_URL:-https://api.notifications.service.gov.uk}
  emailNotifyEnabled: ${NOTIFY_EMAIL_ENABLED:-false}

graphiteHost: ${METRICS_HOST:-localhost}
graphitePort: ${METRICS_PORT:-8092}

xrayEnabled: ${XRAY_ENABLED:-false}

chargesSweepConfig:
  defaultChargeExpiryThreshold: ${CHARGE_EXPIRY_WINDOW_SECONDS:-5400}
  awaitingCaptureExpiryThreshold: ${AWAITING_DELAY_CAPTURE_EXPIRY_WINDOW:-172800}
