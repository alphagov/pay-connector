server:
  applicationConnectors:
    - type: http
      port: ${PORT:-0}
  adminConnectors:
    - type: http
      port: ${ADMIN_PORT:-0}
  registerDefaultExceptionMappers: false
  requestLog:
    appenders:
      - type: console
        layout:
          type: govuk-pay-access-json
          additionalFields:
            container: "connector"
            environment: ${ENVIRONMENT}

logging:
  level: INFO
  appenders:
    - type: logstash-console
      threshold: ALL
      target: stdout
      customFields:
        container: "connector"
        environment: ${ENVIRONMENT}
    - type: pay-dropwizard-3-sentry
      threshold: ERROR
      dsn: ${SENTRY_DSN:-https://example.com@dummy/1}
      environment: ${ENVIRONMENT}

links:
  frontendUrl: ${FRONTEND_URL}

worldpay:
  urls:
    test: ${GDS_CONNECTOR_WORLDPAY_TEST_URL}
    live: ${GDS_CONNECTOR_WORLDPAY_LIVE_URL}
  threeDsFlexDdcUrls:
    test: ${WORLDPAY_3DS_FLEX_DDC_TEST_URL}
    live: ${WORLDPAY_3DS_FLEX_DDC_LIVE_URL}
  secureNotificationEnabled: ${SECURE_WORLDPAY_NOTIFICATION_ENABLED:-false}
  notificationDomain: ${SECURE_WORLDPAY_NOTIFICATION_DOMAIN:-.worldpay.com}
  applePay:
    primaryPrivateKey: ${WORLDPAY_APPLE_PAY_PAYMENT_PROCESSING_PRIVATE_KEY:-privateKeyWhichShouldBeBase64Encoded}
    primaryPublicCertificate: ${WORLDPAY_APPLE_PAY_PAYMENT_PROCESSING_CERTIFICATE:-publicCertificateWhichShouldBeBase64Encoded}
    secondaryPrivateKey: ${WORLDPAY_APPLE_PAY_PAYMENT_PROCESSING_PRIVATE_KEY_SECONDARY:-}
    secondaryPublicCertificate: ${WORLDPAY_APPLE_PAY_PAYMENT_PROCESSING_CERTIFICATE_SECONDARY:-}
  jerseyClientOverrides:
    auth:
      # Auth is run in a background thread which will release the HTTP request from frontend after 1 second
      # supports a polling mechanism. The background thread will wait for the auth request to complete and
      # make its status available to frontend. Median auth time is 1500ms. There are occasional spikes in the
      # auth time, up to 80 seconds. We don't want to leave a user waiting on a spinner for that long, so we'll
      # cut off after 50 seconds and abort the auth attempt. This threshold is chosen to be just below the
      # timeout of 60 seconds used by the egress proxies. Previously we tried as low as 10 seconds and then 20
      # seconds but services reported an increase in AUTHORISATION ERROR states ultimately caused by
      # GATEWAY_CONNECTION_TIMEOUT_ERROR so we are increasing it to try to not get those outliers.
      readTimeout: 50000ms
    cancel:
      # Cancel median time is 500ms and done synchronously. Leave a bit of headroom since we don't have retries on this.
      readTimeout: 5000ms
    refund:
      # Refund median time is 500ms and done synchronously. Leave a bit of headroom since we don't have retries on this.
      readTimeout: 5000ms
    capture:
      # Capture median time is 200ms. We can be quite agressive in the timeout since we have a retry mechanism.
      readTimeout: 3000ms

sandbox:
  allowedCidrs: ${SANDBOX_ALLOWED_CIDRS}
  sandboxAuthToken: ${SANDBOX_AUTH_TOKEN:-}

stripe:
  allowedCidrs: ${STRIPE_ALLOWED_CIDRS}
  url: ${GDS_CONNECTOR_STRIPE_URL:-https://api.stripe.com}
  authTokens:
    test: ${GDS_CONNECTOR_STRIPE_AUTH_TOKEN}
    live: ${GDS_CONNECTOR_STRIPE_AUTH_LIVE_TOKEN}
  webhookSigningSecrets:
    - ${GDS_CONNECTOR_STRIPE_WEBHOOK_SIGN_SECRET}
    - ${GDS_CONNECTOR_STRIPE_WEBHOOK_LIVE_SIGN_SECRET}
    - ${GDS_CONNECTOR_STRIPE_CONNECT_APPLICATION_WEBHOOK_LIVE_SIGN_SECRET}
    - ${GDS_CONNECTOR_STRIPE_CONNECT_APPLICATION_WEBHOOK_TEST_SIGN_SECRET}
  platformAccountId: ${STRIPE_PLATFORM_ACCOUNT_ID}
  feePercentage: ${STRIPE_TRANSACTION_FEE_PERCENTAGE}
  collectFee: ${COLLECT_FEE_FEATURE_FLAG:-false}
  notification3dsWaitDelay: ${NOTIFICATION_3DS_WAIT_DELAY:-3000}
  radarFeeInPence: ${STRIPE_TRANSACTION_RADAR_FEE_IN_PENCE}
  threeDsFeeInPence: ${STRIPE_TRANSACTION_THREE_DS_FEE_IN_PENCE}
  rechargeServicesForLivePaymentDisputesFromDate: ${RECHARGE_SERVICES_FOR_LIVE_PAYMENTS_DISPUTES_FROM_DATE:-1659916800} # 8 August 2022 00:00:00
  rechargeServicesForTestPaymentDisputesFromDate: ${RECHARGE_SERVICES_FOR_TEST_PAYMENTS_DISPUTES_FROM_DATE:-1659916800} # 8 August 2022 00:00:00

executorServiceConfig:
  threadsPerCpu: ${NUMBER_OF_THREADS_PER_CPU:-100}

captureProcessConfig:
  backgroundProcessingEnabled: ${BACKGROUND_PROCESSING_ENABLED:-true}
  chargesConsideredOverdueForCaptureAfter: ${CHARGES_CONSIDERED_OVERDUE_FOR_CAPTURE_AFTER:-60}

  # The below effectively get multiplied together. In order to handle how
  # certain payment gateways do things, it is extremely desirable to keep these
  # values such that we will continue retrying for at least 24 hours after
  # the initial attempt. See PP-9947 for more details.
  maximumRetries: ${CAPTURE_PROCESS_MAXIMUM_RETRIES:-26}
  failedCaptureRetryDelayInSeconds: ${CAPTURE_PROCESS_FAILED_CAPTURE_RETRY_DELAY_IN_SECONDS:-3600}

  queueSchedulerThreadDelayInSeconds: ${CAPTURE_PROCESS_QUEUE_SCHEDULER_THREAD_DELAY_IN_SECONDS:-1}
  queueSchedulerNumberOfThreads: ${CAPTURE_PROCESS_QUEUE_SCHEDULER_NUMBER_OF_THREADS:-1}
  queueSchedulerShutdownTimeoutInSeconds: ${CAPTURE_PROCESS_QUEUE_SCHEDULER_SHUTDOWN_TIMEOUT_IN_SECONDS:-40}

sqsConfig:
  nonStandardServiceEndpoint: ${AWS_SQS_NON_STANDARD_SERVICE_ENDPOINT:-false}
  endpoint: ${AWS_SQS_ENDPOINT:-}
  region: ${AWS_SQS_REGION}
  secretKey: ${AWS_SECRET_KEY}
  accessKey: ${AWS_ACCESS_KEY}
  captureQueueUrl: ${AWS_SQS_CAPTURE_QUEUE_URL}
  eventQueueUrl: ${AWS_SQS_PAYMENT_EVENT_QUEUE_URL}
  payoutReconcileQueueUrl: ${AWS_SQS_PAYOUT_RECONCILE_QUEUE_URL}
  taskQueueUrl: ${AWS_SQS_CONNECTOR_TASKS_QUEUE_URL}
  messageMaximumWaitTimeInSeconds: ${AWS_SQS_MESSAGE_MAXIMUM_WAIT_TIME_IN_SECONDS:-20}
  messageMaximumBatchSize: ${AWS_SQS_MESSAGE_MAXIMUM_BATCH_SIZE:-10}
  maxAllowedDeliveryDelayInSeconds: ${AWS_SQS_MESSAGE_MAXIMUM_ALLOWED_DELIVERY_DELAY_SECONDS:-900}

eventQueue:
  eventQueueEnabled: ${EVENT_QUEUE_ENABLED:-true}
  paymentStateTransitionPollerNumberOfThreads: ${PAYMENT_STATE_TRANSITION_POLLER_NUMBER_OF_THREADS:-1}

payoutReconcileProcessConfig:
  payoutReconcileQueueEnabled: ${PAYOUT_RECONCILE_QUEUE_ENABLED:-true}
  failedPayoutReconcileMessageRetryDelayInSeconds: ${PAYOUT_RECONCILE_PROCESS_RETRY_FAILED_IN_SECONDS:-3600}
  queueSchedulerThreadDelayInSeconds: ${PAYOUT_RECONCILE_PROCESS_QUEUE_SCHEDULER_THREAD_DELAY_IN_SECONDS:-1}
  queueSchedulerNumberOfThreads: ${PAYOUT_RECONCILE_PROCESS_QUEUE_SCHEDULER_NUMBER_OF_THREADS:-1}

taskQueue:
  taskQueueEnabled: ${TASK_QUEUE_ENABLED:-false}
  failedMessageRetryDelayInSeconds: ${TASK_QUEUE_MESSAGE_RETRY_FAILED_IN_SECONDS:-3600}
  queueSchedulerNumberOfThreads: ${TASKS_QUEUE_SCHEDULER_NUMBER_OF_THREADS:-1}
  queueSchedulerThreadDelayInSeconds: ${TASKS_QUEUE_SCHEDULER_THREAD_DELAY_IN_SECONDS:-1}
  queueSchedulerShutdownTimeoutInSeconds: ${TASKS_QUEUE_SCHEDULER_SHUTDOWN_TIMEOUT_IN_SECONDS:-40}
  deliveryDelayInSeconds: ${TASK_QUEUE_DELIVERY_DELAY_IN_SECONDS:-2}

jerseyClient:
  # Defines the socket timeout (SO_TIMEOUT), which is the
  # timeout for waiting for data or, put differently, a maximum period inactivity
  # between two consecutive data packets).
  timeout: 25500ms

  # Determines the timeout until a connection is established
  connectionTimeout: 25500ms
  timeToLive: 1h
  cookiesEnabled: false
  maxConnections: 1024
  maxConnectionsPerRoute: 1024
  keepAlive: 0ms
  retries: 0
  userAgent: connector
  gzipEnabledForRequests: false

customJerseyClient:
  # Sets the read timeout to a specified timeout, in
  # milliseconds. A non-zero value specifies the timeout when
  # reading from Input stream when a connection is established to a
  # resource. If the timeout expires before there is data available
  # for read, a java.net.SocketTimeoutException is raised. A
  # timeout of zero is interpreted as an infinite timeout.
  readTimeout: 90000ms
  connectionTTL: ${CONNECTION_TTL:-60s}

database:
  driverClass: org.postgresql.Driver
  user: ${DB_USER}
  password: ${DB_PASSWORD}
  url: jdbc:postgresql://${DB_HOST}:${DB_PORT:-5432}/${DB_NAME:-connector}?sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory&${DB_SSL_OPTION}

  # the maximum amount of time to wait on an empty pool before throwing an exception
  maxWaitForConnection: 1s

  # the SQL query to run when validating a connection's liveness
  validationQuery: "SELECT '1'"

  # the timeout before a connection validation queries fail
  validationQueryTimeout: 2s

  # The initial size of the connection pool
  initialSize: 4

  # the minimum number of connections to keep open
  minSize: 4

  # the maximum number of connections to keep open
  maxSize: 8

  # whether or not idle connections should be validated
  checkConnectionWhileIdle: false

  # the amount of time to sleep between runs of the idle connection validation, abandoned cleaner and idle pool resizing
  evictionInterval: 10s

  # the minimum amount of time an connection must sit idle in the pool before it is eligible for eviction
  minIdleTime: 1 minute
  properties:
    tcpKeepAlive: true

jpa:
  jpaLoggingLevel: ${JPA_LOG_LEVEL:-WARNING}
  sqlLoggingLevel: ${JPA_SQL_LOG_LEVEL:-WARNING}
  ddlGenerationOutputMode: database
  queryResultsCache: false
  cacheSharedDefault: false

notifyConfig:
  apiKey: ${NOTIFY_API_KEY:-api_key-pay-notify-service-id-pay-notify-secret-needs-to-be-32-chars-fsghdngfhmhfkrgsfs}
  emailTemplateId: ${NOTIFY_PAYMENT_RECEIPT_EMAIL_TEMPLATE_ID}
  refundIssuedEmailTemplateId: ${NOTIFY_REFUND_ISSUED_EMAIL_TEMPLATE_ID}
  notificationBaseURL: ${NOTIFY_BASE_URL:-https://api.notifications.service.gov.uk}
  emailNotifyEnabled: ${NOTIFY_EMAIL_ENABLED:-false}
  retryFailedEmailAfterSeconds: ${NOTIFY_RETRY_FAILED_EMAIL_AFTER_SECONDS:-3600}

graphiteHost: ${METRICS_HOST:-localhost}
graphitePort: ${METRICS_PORT:-8092}

xrayEnabled: ${XRAY_ENABLED:-false}

emitPaymentStateTransitionEvents: ${EMIT_PAYMENT_STATE_TRANSITION_EVENTS:-false}
emitPayoutEvents: ${EMIT_PAYOUT_EVENTS:-false}

chargesSweepConfig:
  defaultChargeExpiryThreshold: ${CHARGE_EXPIRY_WINDOW_SECONDS:-5400}
  awaitingCaptureExpiryThreshold: ${AWAITING_DELAY_CAPTURE_EXPIRY_WINDOW:-432000}
  tokenExpiryThresholdInSeconds: ${TOKEN_EXPIRY_WINDOW_SECONDS:-604800}
  skipExpiringChargesLastUpdatedInSeconds: ${SKIP_EXPIRING_CHARGES_LAST_UPDATED_IN_SECONDS:-300}
  idempotencyKeyExpiryThresholdInSeconds: ${IDEMPOTENCY_KEY_EXPIRY_WINDOW_SECONDS:-86400}

emittedEventSweepConfig:
  notEmittedEventMaxAgeInSeconds: ${NOT_EMITTED_EVENT_MAX_AGE_IN_SECONDS:-1800}

eventEmitterConfig:
  defaultDoNotRetryEmittingEventUntilDurationInSeconds: ${DEFAULT_DO_NOT_RETRY_EMITTING_EVENT_UNTIL_DURATION_IN_SECONDS:-7200}

restClientConfig:
  disabledSecureConnection: ${DISABLE_INTERNAL_HTTPS:-false}

ledgerBaseURL: ${LEDGER_URL}
ledgerPostEventTimeoutInMillis: ${LEDGER_POST_EVENT_TIMEOUT_IN_MILLIS:-1000}
cardidBaseURL: ${CARDID_URL}

expungeConfig:
  excludeChargesOrRefundsParityCheckedWithInDays: ${EXPUNGE_EXCLUDE_CHARGES_OR_REFUNDS_PARITY_CHECKED_WITHIN_DAYS:-7}
  expungeChargesEnabled: ${EXPUNGE_CHARGES_ENABLED:-false}
  numberOfChargesToExpunge: ${EXPUNGE_NO_OF_CHARGES_PER_TASK_RUN:-15000}
  minimumAgeOfChargeInDays: ${EXPUNGE_CHARGES_OLDER_THAN_DAYS:-2}
  minimumAgeForHistoricChargeExceptions: ${EXPUNGE_HISTORIC_CHARGE_EXCEPTIONS_OLDER_THAN_DAYS:-90}
  expungeRefundsEnabled: ${EXPUNGE_REFUNDS_ENABLED:-false}
  numberOfRefundsToExpunge: ${EXPUNGE_NO_OF_REFUNDS_PER_TASK_RUN:-1000}
  minimumAgeOfRefundInDays: ${EXPUNGE_REFUNDS_OLDER_THAN_DAYS:-2}
  minimumAgeForHistoricRefundExceptions: ${EXPUNGE_HISTORIC_REFUND_EXCEPTIONS_OLDER_THAN_DAYS:-90}

authorisation3dsConfig:
  maximumNumberOfTimesToAllowUserToAttempt3ds: ${MAXIMUM_NO_USER_3DS_ATTEMPTS:-1}

authorisationConfig:
  asynchronousAuthTimeoutInMilliseconds: ${AUTH_READ_TIMEOUT_MILLISECONDS:-1000}
  synchronousAuthTimeoutInMilliseconds: ${SYNCHRONOUS_AUTH_TIMEOUT_IN_MILLISECONDS::-10000}

rejectPaymentLinkPaymentsWithCardNumberInReference: ${REJECT_PAYMENT_LINK_PAYMENT_WITH_CARD_NUMBER_IN_REFERENCE_ENABLED:-false}

ecsContainerMetadataUriV4: ${ECS_CONTAINER_METADATA_URI_V4:-}
