server:
  applicationConnectors:
    - type: http
      port: ${PORT:-0}
  adminConnectors:
    - type: http
      port: ${ADMIN_PORT:-0}

logging:
    level: INFO
    appenders:
      - type: console
        threshold: ALL
        timeZone: UTC
        target: stdout
        logFormat: "[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %highlight(%-5level) %cyan(%logger{15}) [requestID=%X{X-Request-Id}] - %msg %n"

links:
  frontendUrl: ${FRONTEND_URL}

worldpay:
  urls:
    test: ${GDS_CONNECTOR_WORLDPAY_TEST_URL}
    live: ${GDS_CONNECTOR_WORLDPAY_LIVE_URL}
  secureNotificationEnabled: ${SECURE_WORLDPAY_NOTIFICATION_ENABLED:-false}
  notificationDomain: ${SECURE_WORLDPAY_NOTIFICATION_DOMAIN:-worldpay.com}
  credentials: ['username','password','merchant_id']
  jerseyClientOverrides:
    auth:
      # Auth is run in a background thread which will release the HTTP request from frontend after 1 second
      # supports a polling mechanism. The background thread will wait for the auth request to complete and
      # make its status available to frontend. Median auth time is 1500ms. There are occasional spikes in the
      # auth time, up to 80 seconds. We don't want to leave a user waiting on a spinner for that long, so we'll
      # cut off after 10 seconds and abort the auth attempt.
      readTimeout: 10000ms
    cancel:
      # Cancel median time is 500ms and done synchronously. Leave a bit of headroom since we don't have retries on this.
      readTimeout: 2000ms
    refund:
      # Refund median time is 500ms and done synchronously. Leave a bit of headroom since we don't have retries on this.
      readTimeout: 2000ms
    capture:
      # Capture median time is 200ms. We can be quite agressive in the timeout since we have a retry mechanism.
      readTimeout: 1000ms

smartpay:
  urls:
    test: ${GDS_CONNECTOR_SMARTPAY_TEST_URL}
    live: ${GDS_CONNECTOR_SMARTPAY_LIVE_URL}
  credentials: ['username','password','merchant_id']

executorServiceConfig:
  timeoutInSeconds: ${AUTH_READ_TIMEOUT_SECONDS:-1}
  threadsPerCpu: ${NUMBER_OF_THREADS_PER_CPU:-100}

captureProcessConfig:
  batchSize: ${CAPTURE_PROCESS_BATCH_SIZE:-10}
  retryFailuresEvery: ${CAPTURE_PROCESS_RETRY_FAILURES_EVERY:-60 minutes}
  maximumRetries: ${CAPTURE_PROCESS_MAXIMUM_RETRIES:-24}

transactionsPaginationServiceConfig:
  displayPageSize: ${TRANSACTION_LIST_DISPLAY_SIZE:-500}

jerseyClient:
  # Defines the socket timeout (SO_TIMEOUT), which is the
  # timeout for waiting for data or, put differently, a maximum period inactivity
  # between two consecutive data packets).
  timeout: 25500ms

  # Determines the timeout until a connection is established
  connectionTimeout: 25500ms
  timeToLive: 1h
  cookiesEnabled: false
  maxConnections: 1024
  maxConnectionsPerRoute: 1024
  keepAlive: 0ms
  retries: 0
  userAgent: connector
  gzipEnabledForRequests: false
  proxy:
      host: ${HTTP_PROXY_HOST:-0}
      port: ${HTTP_PROXY_PORT:-0}
      scheme : ${HTTP_PROXY_SCHEME:-https}
      nonProxyHosts:
        - localhost

customJerseyClient:
  # Sets the read timeout to a specified timeout, in
  # milliseconds. A non-zero value specifies the timeout when
  # reading from Input stream when a connection is established to a
  # resource. If the timeout expires before there is data available
  # for read, a java.net.SocketTimeoutException is raised. A
  # timeout of zero is interpreted as an infinite timeout.
  readTimeout: 90000ms
  enableProxy: ${HTTP_PROXY_ENABLED}

database:
  driverClass: org.postgresql.Driver
  user: ${DB_USER}
  password: ${DB_PASSWORD}
  url: jdbc:postgresql://${DB_HOST}:5432/connector?sslfactory=uk.gov.pay.connector.util.TrustingSSLSocketFactory&${DB_SSL_OPTION}

  # the maximum amount of time to wait on an empty pool before throwing an exception
  maxWaitForConnection: 1s

  # the SQL query to run when validating a connection's liveness
  validationQuery: "SELECT '1'"

  # the timeout before a connection validation queries fail
  validationQueryTimeout: 2s

  # The initial size of the connection pool
  initialSize: 4

  # the minimum number of connections to keep open
  minSize: 4

  # the maximum number of connections to keep open
  maxSize: 8

  # whether or not idle connections should be validated
  checkConnectionWhileIdle: false

  # the amount of time to sleep between runs of the idle connection validation, abandoned cleaner and idle pool resizing
  evictionInterval: 10s

  # the minimum amount of time an connection must sit idle in the pool before it is eligible for eviction
  minIdleTime: 1 minute

jpa:
  jpaLoggingLevel: ${JPA_LOG_LEVEL:-WARNING}
  sqlLoggingLevel: ${JPA_SQL_LOG_LEVEL:-WARNING}
  ddlGenerationOutputMode: database
  queryResultsCache: false
  cacheSharedDefault: false

notifyConfig:
  emailTemplateId: ${NOTIFY_PAYMENT_RECEIPT_EMAIL_TEMPLATE_ID}
  serviceId: ${NOTIFY_SERVICE_ID}
  secret: ${NOTIFY_SECRET}
  notificationBaseURL: ${NOTIFY_BASE_URL:-https://api.notifications.service.gov.uk}
  emailNotifyEnabled: ${NOTIFY_EMAIL_ENABLED:-false}

graphiteHost: ${METRICS_HOST:-localhost}
graphitePort: ${METRICS_PORT:-8092}
