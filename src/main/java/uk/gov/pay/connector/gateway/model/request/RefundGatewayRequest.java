package uk.gov.pay.connector.gateway.model.request;

import uk.gov.pay.connector.charge.model.domain.Charge;
import uk.gov.pay.connector.gateway.GatewayOperation;
import uk.gov.pay.connector.gatewayaccount.model.GatewayAccountEntity;
import uk.gov.pay.connector.gatewayaccountcredentials.model.GatewayAccountCredentialsEntity;
import uk.gov.pay.connector.refund.model.domain.RefundEntity;
import uk.gov.service.payments.commons.model.AuthorisationMode;

import java.util.Map;

public class RefundGatewayRequest implements GatewayRequest {

    private final GatewayAccountEntity gatewayAccountEntity;
    private final String amount;
    private final String transactionId;
    private final String refundExternalId;
    private final String chargeExternalId;
    private final GatewayAccountCredentialsEntity credentialsEntity;
    private final AuthorisationMode authorisationMode;

    private RefundGatewayRequest(String transactionId, GatewayAccountEntity gatewayAccount,
                                 String amount, String refundExternalId, String chargeExternalId,
                                 GatewayAccountCredentialsEntity credentialsEntity,
                                 AuthorisationMode authorisationMode) {
        this.transactionId = transactionId;
        this.gatewayAccountEntity = gatewayAccount;
        this.amount = amount;
        this.refundExternalId = refundExternalId;
        this.chargeExternalId = chargeExternalId;
        this.credentialsEntity = credentialsEntity;
        this.authorisationMode = authorisationMode;
    }

    public String getAmount() {
        return amount;
    }

    public String getTransactionId() {
        return transactionId;
    }

    public String getChargeExternalId() {
        return chargeExternalId;
    }

    @Override
    public GatewayAccountEntity getGatewayAccount() {
        return gatewayAccountEntity;
    }

    @Override
    public GatewayOperation getRequestType() {
        return GatewayOperation.REFUND;
    }

    @Override
    public Map<String, Object> getGatewayCredentials() {
        return credentialsEntity.getCredentials();
    }

    @Override
    public AuthorisationMode getAuthorisationMode() {
        return authorisationMode;
    }

    public String getRefundExternalId() {
        return refundExternalId;
    }
    
    /**
     * <p>
     * For Worldpay ->
     *          transactionId = The original charges.gateway_transaction_id generated by us <br>
     *          reference = our externalId for this refund, <b> this is our link to the worldpay refund transaction</b>
     * </p>
     *
     * <p>
     */
    public static RefundGatewayRequest valueOf(Charge charge, RefundEntity refundEntity,
                                               GatewayAccountEntity gatewayAccountEntity,
                                               GatewayAccountCredentialsEntity gatewayAccountCredentialsEntity) {
        return new RefundGatewayRequest(
                charge.getGatewayTransactionId(),
                gatewayAccountEntity,
                String.valueOf(refundEntity.getAmount()),
                refundEntity.getExternalId(),
                charge.getExternalId(),
                gatewayAccountCredentialsEntity,
                charge.getAuthorisationMode()
        );
    }
    
    @Override
    public String toString() {
        return new StringBuilder()
                .append("RefundGatewayRequest[\n")
                .append("transactionId: ")
                .append(transactionId)
                .append("\nrefundExternalId: ")
                .append(refundExternalId)
                .append("]")
                .toString();
    }
}
