server:
  applicationConnectors:
    - type: http
      port: 0
  adminConnectors:
    - type: http
      port: 0
  registerDefaultExceptionMappers: false

logging:
  level: ERROR
  appenders:
    - type: logstash-console
      threshold: ${LOGGING_LEVEL:-ERROR}
      target: stdout
      customFields:
        container: "connector"

links:
  frontendUrl: http://CardFrontend/

worldpay:
  urls:
    test: http://localhost:10107/jsp/merchant/xml/paymentService.jsp
    live: http://localhost:10107/jsp/merchant/xml/paymentService.jsp
  threeDsFlexDdcUrls:
    test: https://localhost:10108/shopper/3ds/ddc.html
    live: https://localhost:10108/shopper/3ds/ddc.html
  secureNotificationEnabled: true
  notificationDomain: "amazonaws.com"
  credentials: ['username','password','merchant_id']
  applePay:
    primaryPrivateKey: MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgOqukXQoQVbg1xvvq/IGLdK0UuJPbbawULTALcuw/Uz2hRANCAAQPjiA1kTEodST2wy5d5kQFrM0D5qBX9Ukry8W6D+vC7OqbMoTm/upRM1GRHeA2LaVTrwAnpGhoO0ETqYF2Nu4V
    primaryPublicCertificate: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVjRENDQkJhZ0F3SUJBZ0lJVXlyRU00SXpCSFF3Q2dZSUtvWkl6ajBFQXdJd2dZQXhOREF5QmdOVkJBTU0KSzBGd2NHeGxJRmR2Y214a2QybGtaU0JFWlhabGJHOXdaWElnVW1Wc1lYUnBiMjV6SUVOQklDMGdSekl4SmpBawpCZ05WQkFzTUhVRndjR3hsSUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVNUk13RVFZRFZRUUtEQXBCCmNIQnNaU0JKYm1NdU1Rc3dDUVlEVlFRR0V3SlZVekFlRncweE5ERXdNall4TWpFd01UQmFGdzB4TmpFeE1qUXgKTWpFd01UQmFNSUdoTVM0d0xBWUtDWkltaVpQeUxHUUJBUXdlYldWeVkyaGhiblF1WTI5dExuTmxZWFJuWldWcgpMbE5sWVhSSFpXVnJNVFF3TWdZRFZRUUREQ3ROWlhKamFHRnVkQ0JKUkRvZ2JXVnlZMmhoYm5RdVkyOXRMbk5sCllYUm5aV1ZyTGxObFlYUkhaV1ZyTVJNd0VRWURWUVFMREFvNVFqTlJXVGxYUWxvMU1SY3dGUVlEVlFRS0RBNVQKWldGMFIyVmxheXdnU1c1akxqRUxNQWtHQTFVRUJoTUNWVk13V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQgpCd05DQUFRUGppQTFrVEVvZFNUMnd5NWQ1a1FGck0wRDVxQlg5VWtyeThXNkQrdkM3T3FiTW9UbS91cFJNMUdSCkhlQTJMYVZUcndBbnBHaG9PMEVUcVlGMk51NFZvNElDVlRDQ0FsRXdSd1lJS3dZQkJRVUhBUUVFT3pBNU1EY0cKQ0NzR0FRVUZCekFCaGl0b2RIUndPaTh2YjJOemNDNWhjSEJzWlM1amIyMHZiMk56Y0RBMExXRndjR3hsZDNkawpjbU5oTWpBeE1CMEdBMVVkRGdRV0JCUVdHZktnUGdWQlg4Sk92ODRxMWMwNEhTaE1tekFNQmdOVkhSTUJBZjhFCkFqQUFNQjhHQTFVZEl3UVlNQmFBRklTMmhNdzZobUp5RmxtVTZCcWp2VWpmT3Q4TE1JSUJIUVlEVlIwZ0JJSUIKRkRDQ0FSQXdnZ0VNQmdrcWhraUc5Mk5rQlFFd2dmNHdnY01HQ0NzR0FRVUZCd0lDTUlHMkRJR3pVbVZzYVdGdQpZMlVnYjI0Z2RHaHBjeUJqWlhKMGFXWnBZMkYwWlNCaWVTQmhibmtnY0dGeWRIa2dZWE56ZFcxbGN5QmhZMk5sCmNIUmhibU5sSUc5bUlIUm9aU0IwYUdWdUlHRndjR3hwWTJGaWJHVWdjM1JoYm1SaGNtUWdkR1Z5YlhNZ1lXNWsKSUdOdmJtUnBkR2x2Ym5NZ2IyWWdkWE5sTENCalpYSjBhV1pwWTJGMFpTQndiMnhwWTNrZ1lXNWtJR05sY25ScApabWxqWVhScGIyNGdjSEpoWTNScFkyVWdjM1JoZEdWdFpXNTBjeTR3TmdZSUt3WUJCUVVIQWdFV0ttaDBkSEE2Ckx5OTNkM2N1WVhCd2JHVXVZMjl0TDJObGNuUnBabWxqWVhSbFlYVjBhRzl5YVhSNUx6QTJCZ05WSFI4RUx6QXQKTUN1Z0thQW5oaVZvZEhSd09pOHZZM0pzTG1Gd2NHeGxMbU52YlM5aGNIQnNaWGQzWkhKallUSXVZM0pzTUE0RwpBMVVkRHdFQi93UUVBd0lES0RCUEJna3Foa2lHOTJOa0JpQUVRZ3hBUmprek9FWTBOalU0UTBFeVF6RkRPVU16Ck9FSTRSRVpEUWpWRVFrSXlRVEl5TkRVMk1EZEVSRVV5UmpFeE5EWXlNRVU0TkRZNFJVWTFNa1F5TURoRFFUQUsKQmdncWhrak9QUVFEQWdOSUFEQkZBaUIrUTR6enBNajJESlRDSWhERkJjbXdLMXpRQUM3MGZZMklzWWQ4K054dQp1d0loQUtqOVJyVE95aWFRbm9UNU1xaTNVSG9wYjZ4VHVnbDNMVURCbG9yYUJIeVAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  jerseyClientOverrides:
    auth:
      readTimeout: 222ms

sandbox:
  allowedCidrs: ${SANDBOX_ALLOWED_CIDRS:-[]}

epdq:
  allowedCidrs: ${EPDQ_ALLOWED_CIDRS:-[]}
  urls:
    test: ${GDS_CONNECTOR_EPDQ_TEST_URL}
    live: ${GDS_CONNECTOR_EPDQ_LIVE_URL}
  jerseyClientOverrides:
    auth:
      readTimeout: 20000ms
    cancel:
      readTimeout: 2000ms
    refund:
      readTimeout: 2000ms
    capture:
      readTimeout: 1000ms

stripe:
  allowedCidrs: ${STRIPE_ALLOWED_CIDRS:-[]}
  url: ${GDS_CONNECTOR_STRIPE_URL:-https://api.stripe.com}
  authTokens:
    test: ${GDS_CONNECTOR_STRIPE_AUTH_TOKEN:-sk_test}
    live: ${GDS_CONNECTOR_STRIPE_AUTH_LIVE_TOKEN:-sk_live}
  webhookSigningSecrets:
    - ${GDS_CONNECTOR_STRIPE_WEBHOOK_SIGN_SECRET:-whtest}
    - ${GDS_CONNECTOR_STRIPE_WEBHOOK_LIVE_SIGN_SECRET:-whlive}
  platformAccountId: ${STRIPE_PLATFORM_ACCOUNT_ID}
  feePercentage: ${STRIPE_TRANSACTION_FEE_PERCENTAGE:-0.20}
  collectFee: ${COLLECT_FEE_FEATURE_FLAG:-true}
  notification3dsWaitDelay: ${NOTIFICATION_3DS_WAIT_DELAY:-100}
  credentials: ['stripe_account_id']
  radarFeeInPence: ${STRIPE_TRANSACTION_RADAR_FEE_IN_PENCE:-5}
  threeDsFeeInPence: ${STRIPE_TRANSACTION_THREE_DS_FEE_IN_PENCE:-5}
  rechargeServicesForLivePaymentDisputesFromDate: ${RECHARGE_SERVICES_FOR_LIVE_PAYMENTS_DISPUTES_FROM_DATE:-1659916800} # 8 August 2022 00:00:00
  rechargeServicesForTestPaymentDisputesFromDate: ${RECHARGE_SERVICES_FOR_TEST_PAYMENTS_DISPUTES_FROM_DATE:-1659916800} # 8 August 2022 00:00:00

executorServiceConfig:
  threadsPerCpu: ${NUMBER_OF_THREADS_PER_CPU:-100}

captureProcessConfig:
  backgroundProcessingEnabled: ${BACKGROUND_PROCESSING_ENABLED:-false}
  chargesConsideredOverdueForCaptureAfter: 60
  maximumRetries: ${CAPTURE_PROCESS_MAXIMUM_RETRIES:-26}
  failedCaptureRetryDelayInSeconds: ${CAPTURE_PROCESS_FAILED_CAPTURE_RETRY_DELAY_IN_SECONDS:-3600}
  queueSchedulerThreadDelayInSeconds: ${CAPTURE_PROCESS_QUEUE_SCHEDULER_THREAD_DELAY_IN_SECONDS:-1}
  queueSchedulerNumberOfThreads: ${CAPTURE_PROCESS_QUEUE_SCHEDULER_NUMBER_OF_THREADS:-1}
  queueSchedulerShutdownTimeoutInSeconds: ${CAPTURE_PROCESS_QUEUE_SCHEDULER_SHUTDOWN_TIMEOUT_IN_SECONDS:-40}

sqsConfig:
  nonStandardServiceEndpoint: ${AWS_SQS_NON_STANDARD_SERVICE_ENDPOINT:-true}
  endpoint: ${AWS_SQS_ENDPOINT:-localhost}
  region: ${AWS_SQS_REGION}
  secretKey: ${AWS_SECRET_KEY:-secret-key}
  accessKey: ${AWS_ACCESS_KEY:-access-key}
  captureQueueUrl: ${AWS_SQS_CAPTURE_QUEUE_URL}
  eventQueueUrl: ${AWS_SQS_PAYMENT_EVENT_QUEUE_URL}
  payoutReconcileQueueUrl: ${AWS_SQS_PAYOUT_RECONCILE_QUEUE_URL}
  taskQueueUrl: ${AWS_SQS_CONNECTOR_TASKS_QUEUE_URL}
  messageMaximumWaitTimeInSeconds: ${AWS_SQS_MESSAGE_MAXIMUM_WAIT_TIME_IN_SECONDS:-20}
  messageMaximumBatchSize: ${AWS_SQS_MESSAGE_MAXIMUM_BATCH_SIZE:-10}

eventQueue:
  eventQueueEnabled: ${EVENT_QUEUE_ENABLED:-false}
  paymentStateTransitionPollerNumberOfThreads: ${PAYMENT_STATE_TRANSITION_POLLER_NUMBER_OF_THREADS:-1}

payoutReconcileProcessConfig:
  payoutReconcileQueueEnabled: ${PAYOUT_RECONCILE_QUEUE_ENABLED:-false}
  failedPayoutReconcileMessageRetryDelayInSeconds: ${PAYOUT_RECONCILE_PROCESS_RETRY_FAILED_IN_SECONDS:-3600}
  queueSchedulerThreadDelayInSeconds: ${PAYOUT_RECONCILE_PROCESS_QUEUE_SCHEDULER_THREAD_DELAY_IN_SECONDS:-1}
  queueSchedulerNumberOfThreads: ${PAYOUT_RECONCILE_PROCESS_QUEUE_SCHEDULER_NUMBER_OF_THREADS:-1}

taskQueue:
  taskQueueEnabled: ${TASK_QUEUE_ENABLED:-false}
  failedMessageRetryDelayInSeconds: ${TASK_QUEUE_MESSAGE_RETRY_FAILED_IN_SECONDS:-1}
  queueSchedulerNumberOfThreads: ${TASKS_QUEUE_SCHEDULER_NUMBER_OF_THREADS:-1}
  queueSchedulerThreadDelayInSeconds: ${TASKS_QUEUE_SCHEDULER_THREAD_DELAY_IN_SECONDS:-1}
  queueSchedulerShutdownTimeoutInSeconds: ${TASKS_QUEUE_SCHEDULER_SHUTDOWN_TIMEOUT_IN_SECONDS:-40}
  deliveryDelayInSeconds: ${TASK_QUEUE_DELIVERY_DELAY_IN_SECONDS:-2}

jerseyClient:
  timeout: 500ms
  connectionTimeout: 500ms
  timeToLive: 1h
  cookiesEnabled: false
  maxConnections: 1024
  maxConnectionsPerRoute: 1024
  keepAlive: 0ms
  retries: 0
  userAgent: connector
  gzipEnabledForRequests: false

customJerseyClient:
  readTimeout: 90000ms
  connectionTTL: 60s

database:
  driverClass: org.postgresql.Driver
  user: postgres
  password: mysecretpassword
  url: jdbc:postgresql://localhost:5432/connector

  # the maximum amount of time to wait on an empty pool before throwing an exception
  maxWaitForConnection: 1s

  # the SQL query to run when validating a connection's liveness
  validationQuery: "SELECT '1'"

  # the timeout before a connection validation queries fail
  validationQueryTimeout: 3s

  # the minimum number of connections to keep open
  minSize: 8

  # the maximum number of connections to keep open
  maxSize: 32

  # whether or not idle connections should be validated
  checkConnectionWhileIdle: false

  # the amount of time to sleep between runs of the idle connection validation, abandoned cleaner and idle pool resizing
  evictionInterval: 10s

  # the minimum amount of time an connection must sit idle in the pool before it is eligible for eviction
  minIdleTime: 1 minute

jpa:
  jpaLoggingLevel: WARNING
  sqlLoggingLevel: WARNING
  ddlGenerationOutputMode: database
  queryResultsCache: false
  cacheSharedDefault: false

notifyConfig:
  emailTemplateId: test-template-id
  apiKey: ${NOTIFY_API_KEY:-pay-notify-api-key}
  notificationBaseURL: https://stubs.pymnt.localdomain
  emailNotifyEnabled: false

graphiteHost: ${METRICS_HOST:-localhost}
graphitePort: ${METRICS_PORT:-8092}

xrayEnabled: false

emitPaymentStateTransitionEvents: ${EMIT_PAYMENT_STATE_TRANSITION_EVENTS:-false}
emitPayoutEvents: ${EMIT_PAYOUT_EVENTS:-false}

chargesSweepConfig:
  defaultChargeExpiryThreshold: ${CHARGE_EXPIRY_WINDOW_SECONDS:-5400}
  awaitingCaptureExpiryThreshold: ${AWAITING_DELAY_CAPTURE_EXPIRY_WINDOW:-432000}
  tokenExpiryThresholdInSeconds: ${TOKEN_EXPIRY_WINDOW_SECONDS:-604800}
  skipExpiringChargesLastUpdatedInSeconds: ${SKIP_EXPIRING_CHARGES_LAST_UPDATED_IN_SECONDS:-300}
  idempotencyKeyExpiryThresholdInSeconds: ${IDEMPOTENCY_KEY_EXPIRY_WINDOW_SECONDS:-86400}

emittedEventSweepConfig:
  notEmittedEventMaxAgeInSeconds: ${NOT_EMITTED_EVENT_MAX_AGE_IN_SECONDS:-1800}

eventEmitterConfig:
  defaultDoNotRetryEmittingEventUntilDurationInSeconds: ${DEFAULT_DO_NOT_RETRY_EMITTING_EVENT_UNTIL_DURATION_IN_SECONDS:-7200}

restClientConfig:
  disabledSecureConnection: true

ledgerBaseURL: ${LEDGER_URL:-localhost:10700}
ledgerPostEventTimeoutInMillis: ${LEDGER_POST_EVENT_TIMEOUT_IN_MILLIS:-1000}
cardidBaseURL: ${CARDID_URL:-http://localhost:9900}

expungeConfig:
  excludeChargesOrRefundsParityCheckedWithInDays: ${EXPUNGE_EXCLUDE_CHARGES_OR_REFUNDS_PARITY_CHECKED_WITHIN_DAYS:-7}
  expungeChargesEnabled: ${EXPUNGE_CHARGES_ENABLED:-false}
  numberOfChargesToExpunge: ${EXPUNGE_NO_OF_CHARGES_PER_TASK_RUN:-1000}
  minimumAgeOfChargeInDays: ${EXPUNGE_CHARGES_OLDER_THAN_DAYS:-7}
  minimumAgeForHistoricChargeExceptions: ${EXPUNGE_HISTORIC_CHARGE_EXCEPTIONS_OLDER_THAN_DAYS:-90}
  expungeRefundsEnabled: ${EXPUNGE_REFUNDS_ENABLED:-false}
  numberOfRefundsToExpunge: ${EXPUNGE_NO_OF_REFUNDS_PER_TASK_RUN:-1000}
  minimumAgeOfRefundInDays: ${EXPUNGE_REFUNDS_OLDER_THAN_DAYS:-7}
  minimumAgeForHistoricRefundExceptions: ${EXPUNGE_HISTORIC_REFUND_EXCEPTIONS_OLDER_THAN_DAYS:-90}

authorisation3dsConfig:
  maximumNumberOfTimesToAllowUserToAttempt3ds: ${MAXIMUM_NO_USER_3DS_ATTEMPTS:-1}

authorisationConfig:
  asynchronousAuthTimeoutInMilliseconds: ${AUTH_READ_TIMEOUT_MILLISECONDS:-1000}
  synchronousAuthTimeoutInMilliseconds: ${SYNCHRONOUS_AUTH_READ_TIMEOUT_IN_MILLISECONDS::-10000}

rejectPaymentLinkPaymentsWithCardNumberInReference: ${REJECT_PAYMENT_LINK_PAYMENT_WITH_CARD_NUMBER_IN_REFERENCE_ENABLED:-true}
