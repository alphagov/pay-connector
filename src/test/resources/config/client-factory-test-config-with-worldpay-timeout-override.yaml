server:
  applicationConnectors:
    - type: http
      port: 0
  adminConnectors:
    - type: http
      port: 0
  registerDefaultExceptionMappers: false

logging:
  level: INFO
  appenders:
    - type: console
      threshold: ALL
      timeZone: UTC
      target: stdout
      logFormat: "[%d{yyyy-MM-dd HH:mm:ss.SSS}] [thread=%thread] [level=%-5level] [logger=%logger{15}] [requestID=%X{X-Request-Id:-(none)}] - %msg%n"

worldpay:
  urls:
    test: http://localhost:10107/not/used
    live: http://localhost:10107/not/used
  secureNotificationEnabled: true
  notificationDomain: ""
  applePay:
    privateKey: MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgOqukXQoQVbg1xvvq/IGLdK0UuJPbbawULTALcuw/Uz2hRANCAAQPjiA1kTEodST2wy5d5kQFrM0D5qBX9Ukry8W6D+vC7OqbMoTm/upRM1GRHeA2LaVTrwAnpGhoO0ETqYF2Nu4V
    publicCertificate: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVjRENDQkJhZ0F3SUJBZ0lJVXlyRU00SXpCSFF3Q2dZSUtvWkl6ajBFQXdJd2dZQXhOREF5QmdOVkJBTU0KSzBGd2NHeGxJRmR2Y214a2QybGtaU0JFWlhabGJHOXdaWElnVW1Wc1lYUnBiMjV6SUVOQklDMGdSekl4SmpBawpCZ05WQkFzTUhVRndjR3hsSUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVNUk13RVFZRFZRUUtEQXBCCmNIQnNaU0JKYm1NdU1Rc3dDUVlEVlFRR0V3SlZVekFlRncweE5ERXdNall4TWpFd01UQmFGdzB4TmpFeE1qUXgKTWpFd01UQmFNSUdoTVM0d0xBWUtDWkltaVpQeUxHUUJBUXdlYldWeVkyaGhiblF1WTI5dExuTmxZWFJuWldWcgpMbE5sWVhSSFpXVnJNVFF3TWdZRFZRUUREQ3ROWlhKamFHRnVkQ0JKUkRvZ2JXVnlZMmhoYm5RdVkyOXRMbk5sCllYUm5aV1ZyTGxObFlYUkhaV1ZyTVJNd0VRWURWUVFMREFvNVFqTlJXVGxYUWxvMU1SY3dGUVlEVlFRS0RBNVQKWldGMFIyVmxheXdnU1c1akxqRUxNQWtHQTFVRUJoTUNWVk13V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQgpCd05DQUFRUGppQTFrVEVvZFNUMnd5NWQ1a1FGck0wRDVxQlg5VWtyeThXNkQrdkM3T3FiTW9UbS91cFJNMUdSCkhlQTJMYVZUcndBbnBHaG9PMEVUcVlGMk51NFZvNElDVlRDQ0FsRXdSd1lJS3dZQkJRVUhBUUVFT3pBNU1EY0cKQ0NzR0FRVUZCekFCaGl0b2RIUndPaTh2YjJOemNDNWhjSEJzWlM1amIyMHZiMk56Y0RBMExXRndjR3hsZDNkawpjbU5oTWpBeE1CMEdBMVVkRGdRV0JCUVdHZktnUGdWQlg4Sk92ODRxMWMwNEhTaE1tekFNQmdOVkhSTUJBZjhFCkFqQUFNQjhHQTFVZEl3UVlNQmFBRklTMmhNdzZobUp5RmxtVTZCcWp2VWpmT3Q4TE1JSUJIUVlEVlIwZ0JJSUIKRkRDQ0FSQXdnZ0VNQmdrcWhraUc5Mk5rQlFFd2dmNHdnY01HQ0NzR0FRVUZCd0lDTUlHMkRJR3pVbVZzYVdGdQpZMlVnYjI0Z2RHaHBjeUJqWlhKMGFXWnBZMkYwWlNCaWVTQmhibmtnY0dGeWRIa2dZWE56ZFcxbGN5QmhZMk5sCmNIUmhibU5sSUc5bUlIUm9aU0IwYUdWdUlHRndjR3hwWTJGaWJHVWdjM1JoYm1SaGNtUWdkR1Z5YlhNZ1lXNWsKSUdOdmJtUnBkR2x2Ym5NZ2IyWWdkWE5sTENCalpYSjBhV1pwWTJGMFpTQndiMnhwWTNrZ1lXNWtJR05sY25ScApabWxqWVhScGIyNGdjSEpoWTNScFkyVWdjM1JoZEdWdFpXNTBjeTR3TmdZSUt3WUJCUVVIQWdFV0ttaDBkSEE2Ckx5OTNkM2N1WVhCd2JHVXVZMjl0TDJObGNuUnBabWxqWVhSbFlYVjBhRzl5YVhSNUx6QTJCZ05WSFI4RUx6QXQKTUN1Z0thQW5oaVZvZEhSd09pOHZZM0pzTG1Gd2NHeGxMbU52YlM5aGNIQnNaWGQzWkhKallUSXVZM0pzTUE0RwpBMVVkRHdFQi93UUVBd0lES0RCUEJna3Foa2lHOTJOa0JpQUVRZ3hBUmprek9FWTBOalU0UTBFeVF6RkRPVU16Ck9FSTRSRVpEUWpWRVFrSXlRVEl5TkRVMk1EZEVSRVV5UmpFeE5EWXlNRVU0TkRZNFJVWTFNa1F5TURoRFFUQUsKQmdncWhrak9QUVFEQWdOSUFEQkZBaUIrUTR6enBNajJESlRDSWhERkJjbXdLMXpRQUM3MGZZMklzWWQ4K054dQp1d0loQUtqOVJyVE95aWFRbm9UNU1xaTNVSG9wYjZ4VHVnbDNMVURCbG9yYUJIeVAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  credentials: ['username','password','merchant_id']

  jerseyClientOverrides:
    auth:
      readTimeout: 20ms
    cancel:
      readTimeout: 2000ms
    refund:
      readTimeout: 2000ms
    capture:
      readTimeout: 2000ms

smartpay:
  urls:
    test: http://localhost:10107/not/used
    live: http://localhost:10107/not/used
  credentials: ['username','password']

epdq:
  urls:
    test: ${GDS_CONNECTOR_EPDQ_TEST_URL}
    live: ${GDS_CONNECTOR_EPDQ_LIVE_URL}
  jerseyClientOverrides:
    auth:
      readTimeout: 20000ms
    cancel:
      readTimeout: 2000ms
    refund:
      readTimeout: 2000ms
    capture:
      readTimeout: 1000ms

stripe:
  url: ${GDS_CONNECTOR_STRIPE_URL:-https://api.stripe.com}
  authTokens:
    test: ${GDS_CONNECTOR_STRIPE_AUTH_TOKEN:-sk_test}
    live: ${GDS_CONNECTOR_STRIPE_AUTH_LIVE_TOKEN}
  webhookSigningSecrets:
      test: ${GDS_CONNECTOR_STRIPE_WEBHOOK_SIGN_SECRET:-whtest}
      live: ${GDS_CONNECTOR_STRIPE_WEBHOOK_LIVE_SIGN_SECRET:-whlive}
  platformAccountId: ${STRIPE_PLATFORM_ACCOUNT_ID}
  feePercentage: ${STRIPE_TRANSACTION_FEE_PERCENTAGE:-0.08}
  collectFee: ${COLLECT_FEE_FEATURE_FLAG:-true}

jerseyClient:
  timeout: 500ms
  connectionTimeout: 500ms
  timeToLive: 1h
  cookiesEnabled: false
  maxConnections: 1024
  maxConnectionsPerRoute: 1024
  keepAlive: 0ms
  retries: 0
  userAgent: connector
  gzipEnabledForRequests: false

customJerseyClient:
  readTimeout: 50000ms

executorServiceConfig:
  timeoutInSeconds: ${AUTH_READ_TIMEOUT_SECONDS:-1}
  threadsPerCpu: ${NUMBER_OF_THREADS_PER_CPU:-100}

captureProcessConfig:
  schedulerInitialDelayInSeconds: ${CAPTURE_PROCESS_SCHEDULER_INITIAL_DELAY_SECONDS:-20}
  schedulerRandomIntervalMinimumInSeconds: ${CAPTURE_PROCESS_SCHEDULER_RANDOM_INTERVAL_MINIMUM_SECONDS:-150}
  schedulerRandomIntervalMaximumInSeconds: ${CAPTURE_PROCESS_SCHEDULER_RANDOM_INTERVAL_MAXIMUM_SECONDS:-200}
  batchSize: 10
  schedulerThreads: 1
  retryFailuresEvery: 60 minutes
  maximumRetries: ${CAPTURE_PROCESS_MAXIMUM_RETRIES:-48}
  captureUsingSQS: ${CAPTURE_USING_SQS_FEATURE_FLAG:-false}

sqsConfig:
  endpoint: ${AWS_SQS_ENDPOINT:-localhost}
  region: ${AWS_SQS_REGION:-region}
  captureQueueUrl: ${AWS_SQS_CAPTURE_QUEUE_URL}

backgroundProcessingEnabled: ${BACKGROUND_PROCESSING_ENABLED:-true}

transactionsPaginationServiceConfig:
  displayPageSize: ${TRANSACTION_LIST_DISPLAY_SIZE:-500}

database:
  driverClass: org.postgresql.Driver
  user: postgres
  password: mysecretpassword
  url: jdbc:postgresql://localhost:5432/connector

  # the maximum amount of time to wait on an empty pool before throwing an exception
  maxWaitForConnection: 1s

  # the SQL query to run when validating a connection's liveness
  validationQuery: "SELECT '1'"

  # the timeout before a connection validation queries fail
  validationQueryTimeout: 3s

  # the minimum number of connections to keep open
  minSize: 8

  # the maximum number of connections to keep open
  maxSize: 32

  # whether or not idle connections should be validated
  checkConnectionWhileIdle: false

  # the amount of time to sleep between runs of the idle connection validation, abandoned cleaner and idle pool resizing
  evictionInterval: 10s

  # the minimum amount of time an connection must sit idle in the pool before it is eligible for eviction
  minIdleTime: 1 minute

jpa:
  jpaLoggingLevel: WARNING
  sqlLoggingLevel: WARNING
  ddlGenerationOutputMode: database
  queryResultsCache: false
  cacheSharedDefault: false

notifyConfig:
  emailTemplateId: test-template-id
  refundIssuedEmailTemplateId: ${NOTIFY_REFUND_ISSUED_EMAIL_TEMPLATE_ID}
  apiKey: ${NOTIFY_API_KEY:-pay-notify-api-key}
  notificationBaseURL: https://stubs.pymnt.localdomain
  emailNotifyEnabled: false

graphiteHost: ${METRICS_HOST:-localhost}
graphitePort: ${METRICS_PORT:-8092}

xrayEnabled: false

chargesSweepConfig:
  defaultChargeExpiryThreshold: ${CHARGE_EXPIRY_WINDOW_SECONDS:-5400}
  awaitingCaptureExpiryThreshold: ${AWAITING_DELAY_CAPTURE_EXPIRY_WINDOW:-172800}
